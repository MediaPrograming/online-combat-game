plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.14'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    //JavaFx
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.22.0'
}


repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/"
        //url "https://plugins.gradle.org/m2/"
    }
    jcenter()
    mavenCentral()
    mavenLocal()
}



def grpcVersion = '1.34.1'
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion
def defaultEncoding = 'UTF-8'
def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}
dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}" //後で消していいかも

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
    implementation 'org.jetbrains:annotations:19.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    //runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
}
protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

mainClassName = 'game.view.MainApp'

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        // テスト時の標準出力と標準エラー出力を表示する
        showStandardStreams true
        // イベントを出力する (TestLogEvent)
        events 'started', 'skipped', 'passed', 'failed'
        // 例外発生時の出力設定 (TestExceptionFormat)
        exceptionFormat 'full'
    }
}

//実行可能なファットjarを作成するためのランチャークラスの設定
jar {
    manifest {
        attributes 'Main-Class': 'game.view.MainApp'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
//javafx
javafx {
    version = "13"
    modules = ['javafx.controls', 'javafx.fxml']
}

task GrpcServer(type: CreateStartScripts) {
    mainClassName = 'server.core.GrpcServer'
    applicationName = 'message-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task GrpcClient(type: CreateStartScripts) {
    mainClassName = 'game.view.MainApp'
    applicationName = 'message-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(GrpcServer)
    from(GrpcClient)
    fileMode = 0755
}

//文字コード
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
compileJava {
    options.encoding = defaultEncoding
}
compileTestJava {
    options.encoding = defaultEncoding
}

javadoc {
    options.charSet = defaultEncoding
    options.encoding = defaultEncoding
}

//jlink {
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    launcher {
//        name = 'game.view'
//    }
//}
jlink {
    launcher {
        name = 'game.view.MainApp'
    }
}