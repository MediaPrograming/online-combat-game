package server.service;
/**
 * @author Takuya Isaki
 * @project online-combat-game
 */

import game.config.CharaData.*;
import game.phisics.Character;
import game.phisics.PhysicsObject;
import io.game.hub.messageHub.*;
import server.core.RoomManager;
import server.room.Room;
import io.grpc.stub.StreamObserver;
import server.room.UserState;
import game.phisics.Attackplygon;
import java.util.ArrayList;
import java.util.Set;

import static server.util.RoomUtil.createGrpcRoom;

/**
 * This extends MessageHubImplBase. It is automatically generated by messageHub.proto.
 * Bind ServerBuilder in server class.
 */
public class MessageHubImpl extends MessageHubGrpc.MessageHubImplBase {
    /**
     * ルームの取得
     *
     * @param request
     * @param responseObserver
     */
    @Override
    public void getRooms(UnitRequest request, StreamObserver<GrpcRoomInfo> responseObserver) {
        var rooms = RoomManager.Instance.getRooms();
        var builder = GrpcRoomInfo.newBuilder();

        //Search for rooms that can be entered
        for (var set : rooms.entrySet()) {
            Room room = set.getValue();
            if (room.getCount() > room.getLimit()) continue;
            var gRoom = GrpcRoom.newBuilder()
                    .setRoomName(set.getKey())
                    .setHostName(room.getHostName())
                    .build();
            builder.addRoom(gRoom);
        }
        responseObserver.onNext(builder.build());
    }

    @Override
    public void getUsers(User request, StreamObserver<GrpcRoom> responseObserver) {
        var roomName = request.getRoomName();
        var room = RoomManager.Instance.getRoom(roomName);
        var gRoom = GrpcRoom.newBuilder()
                .setRoomName(room.getRoomName())
                .setHostName(room.getHostName());
        for (var observer : room.getObserver().entrySet())
            gRoom.addUser(observer.getValue().user);
        responseObserver.onNext(gRoom.build());
    }

    /**
     * ルームの作成
     *
     * @param request
     * @param responseObserver
     */
    @Override
    public void createRoom(RoomMessage request, StreamObserver<ResponseCode> responseObserver) {
        //null check
        var roomName = request.getRoom().getRoomName();
        if (roomName == null || roomName.isEmpty()) {
            responseObserver.onNext(ResponseCode.newBuilder().setCode(400).setMessage("ルームの名前が空です").build()); //エラーのレスポンス
            return;
        }
        if (RoomManager.Instance.contain(roomName)) {
            responseObserver.onNext(ResponseCode.newBuilder().setCode(400).setMessage("同じルームが存在しています").build());
            return;
        }
        Room room = new Room(request.getUser(), request.getRoom(), 4);
        RoomManager.Instance.pushRoom(room);
        System.out.println("[Room Created]\nhostname = " + request.getRoom().getHostName() + "\nname = " + roomName);
        responseObserver.onNext(ResponseCode.newBuilder().setCode(200).build()); //成功 200 OK
    }


    @Override
    public void deleteRoom(RoomMessage request, StreamObserver<ResponseCode> responseObserver) {
        RoomManager.Instance.deleteRoom(request.getRoom());
    }

    @Override
    public StreamObserver<Message> streamEvent(StreamObserver<Message> responseObserver) {
        return new StreamObserver<Message>() {
            @Override
            public void onNext(Message value) {
                var roomName = value.getRoom().getRoomName();
                if (RoomManager.Instance.contain(roomName)) {
                    //Case of no existing room
                    responseObserver.onNext(
                            Message.newBuilder()
                                    .setType(Type.ERROR)
                                    .setUser(value.getUser())
                                    .setMessage("This room name is invalid")
                                    .build());
                    return;
                }
                Room room = RoomManager.Instance.getRoom(value.getRoom().getRoomName());
                //userのput
                var id = value.getUser().getId();
                if (!room.getObserver().contains(id)) {
                    UserState userState = new UserState();
                    userState.eventObserver = responseObserver;
                    userState.user = value.getUser();
                    room.getObserver().put(id, userState);
                }

                var m = Message.newBuilder()
                        .setRoom(value.getRoom())
                        .setUser(value.getUser())
                        .setType(value.getType());

                switch (value.getType()) {
                    case JOIN:
                        System.out.println(roomName + "に参加した");
                        System.out.println("JOIN");
                        break;
                    case LEAVE:
                        //leaveした場合アカウントの消去が行われる
                        boolean isHost = room.getHostId() == value.getUser().getId();
                        if (isHost) RoomManager.Instance.deleteRoom(room);
                        else room.removeUser(id);
                        responseObserver.onNext(value);
                        break;
                    case MESSAGE:
                        RoomManager.Instance.getRoom(roomName)
                                .getObserver()
                                .values()
                                .stream()
                                .map(x -> x.eventObserver)
                                .forEach(ob -> ob.onNext(value));
                        break;
                    case UPDATE:
                        room.updateRoom(id, value.getUser());
                        break;
                    case GAME_START:
                        String message = "";
                        //room内の全員がreadyOkか確認する
                        for (var o : room.getObserver().entrySet()) {
                            if (!o.getValue().user.getIsReady()) {
                                message = "全員が準備完了していません";
                                m.setType(Type.ERROR);
                            }
                        }
                        //二人いるか確認する
                        var size = room.getObserver().size();
                        if (size != 2) {
                            message = "あなた一人しかいません";
                            m.setType(Type.ERROR);
                        }
                        m.setMessage(message);
                        if (m.getType() == Type.GAME_START) {
                            System.out.println("GAME_START");
                            SetUp(room);
                            RoomManager.Instance.CombatStart(roomName);
                        } else if (m.getType() == Type.ERROR) System.out.println(message);
                        break;
                    case UNKNOWN:
                        System.out.println("[UNKNOWN]");
                        break;
                    default:
                        System.out.println("不明なリクエストの送信");
                        break;
                }
                m.setRoom(createGrpcRoom(room));
                //ルームに所属している場合に通知を送る
                for (var r : room.getObserver().entrySet()) {
                    r.getValue().eventObserver.onNext(m.build());
                }
            }

            @Override
            public void onError(Throwable t) {
                System.out.println(t.toString());
            }

            @Override
            public void onCompleted() {
            }
        };
    }


    void SetUp(Room room) {
        var observers = room.getObserver();
        UserState[] states = new UserState[2];
        int i = 0;
        for (var o : observers.entrySet()) {
            states[i] = o.getValue();
            i++;
            if (i > 1) break;
        }
        SetCharacter(states[0], room);
        SetCharacter(states[1], room);
        PhysicsObject flore = new PhysicsObject(-200, 600, 1680, 100);
        room.ground.add(flore);
    }

    void SetCharacter(UserState userState, Room room) {
        var ct = userState.user.getCharacterType();
        Attackplygon chareattack;
        game.phisics.Character character;
        var x = userState.user.getId() == room.getHostId() ? 200 : 1000;
        var y = 50;
        chareattack = new Attackplygon(0, 0, 1, 1);
        switch (ct){
            case Gura :
                character = new Character(x, y, Gura.width, Gura.height,Gura.HP,ct,chareattack);
                break;
            case Kiara:
                character = new Character(x, y, Kiara.width, Kiara.height,Kiara.HP,ct ,chareattack);
                break;
            case Amelia:
                character = new Character(x, y, Ame.width, Ame.height, Ame.HP,ct,chareattack);
                break;
            case Inanis:
                character = new Character(x, y, Ina.width, Ina.height, Ina.HP,ct,chareattack);
                break;
            case Calliope:
                character = new Character(x, y, Calli.width, Calli.height, Calli.HP,ct,chareattack);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + ct);
        }
        userState.character = character;
    }
}