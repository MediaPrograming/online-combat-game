/**
 * @author Takuya Isaki
 * @version 0.0.1
 */
package server.service;

import io.game.hub.messageHub.*;
import server.core.RoomManager;
import server.room.Room;
import io.grpc.stub.StreamObserver;

/**
 * This extends MessageHubImplBase. It is automatically generated by messageHub.proto.
 * Bind ServerBuilder in serve class.
 */
public class MessageHubImpl extends MessageHubGrpc.MessageHubImplBase {
    /**
     * ルームの取得
     *
     * @param request
     * @param responseObserver
     */
    @Override
    public void getRooms(UnitRequest request, StreamObserver<GrpcRoomInfo> responseObserver) {
        var rooms = RoomManager.Instance.getRooms();
        var builder = GrpcRoomInfo.newBuilder();

        //Search for rooms that can be entered
        for (var set : rooms.entrySet()) {
            Room room = set.getValue();
            if (room.getCount() > room.getLimit()) continue;
            var gRoom = GrpcRoom.newBuilder()
                    .setRoomName(set.getKey())
                    .setHostName(room.getHostName())
                    .build();
            builder.addRoom(gRoom);
        }
        responseObserver.onNext(builder.build());
    }

    /**
     * ルームの作成
     *
     * @param request
     * @param responseObserver
     */
    @Override
    public void createRoom(RoomMessage request, StreamObserver<ResponseCode> responseObserver) {
        System.out.println("[test]" + request.getUser().getName());

        //null check
        var roomName = request.getRoom().getRoomName();
         if (roomName == null || roomName.isEmpty()) {
            responseObserver.onNext(ResponseCode.newBuilder().setCode(400).build()); //エラーのレスポンス
            return;
        }
        var hostName = request.getUser().getName();
        Room room = new Room(hostName, roomName, 4);
        RoomManager.Instance.pushRoom(room);

        System.out.println("hostname = " + hostName + "name = " + roomName);
        responseObserver.onNext(ResponseCode.newBuilder().setCode(200).build()); //成功 200 OK
    }


    @Override
    public void deleteRoom(RoomMessage request, StreamObserver<ResponseCode> responseObserver) {
        RoomManager.Instance.deleteRoom(request.getRoom());
    }

    @Override
    public StreamObserver<Message> streamEvent(StreamObserver<Message> responseObserver) {
        return new StreamObserver<Message>() {
            @Override
            public void onNext(Message value) {
                var roomName = value.getUser().getRoomInfo().getRoomName();
                if (RoomManager.Instance.containe(roomName)) {
                    //Case of no existing room
                    responseObserver.onNext(
                            Message.newBuilder()
                                    .setType(Type.ERROR)
                                    .setUser(value.getUser())
                                    .setMessage("This room name is invalid")
                                    .build());
                    return;
                }
                Room room = RoomManager.Instance.getRoom(value.getUser().getRoomInfo().getRoomName());
                var id = value.getUser().getId();

                switch (value.getType()) {
                    case JOIN:
                        System.out.println(roomName  + "に参加した");
                        roomName = value.getMessage();
                        room = RoomManager.Instance.getRoom(roomName);
                        room.putUser(id, responseObserver);
                        break;
                    case LEAVE:
                        room.removeUser(id);
                        break;
                    case MESSAGE:
                        var observers = RoomManager.Instance.getRoom(roomName).getEventObservers().values();
                        for (var observer : observers) observer.onNext(value);
                        break;
                    case UNKNOWN:

                        break;
                    default:
                        return;
                }

                //ルームに所属している場合に通知を送る
                var observers = RoomManager.Instance
                        .getRoom(roomName)
                        .getEventObservers()
                        .values();
                for (var observer : observers) observer.onNext(value);
            }


            @Override
            public void onError(Throwable t) {

            }

            @Override
            public void onCompleted() {

            }
        };
    }

//    @Override
//    public StreamObserver<RoomRequest> join(StreamObserver<User> responseObserver) {
//        return new StreamObserver<RoomRequest>() {
//            @Override
//            public void onNext(RoomRequest value) {
//                Room room = RoomManager.Instance.getRoom(value.getRoomName());
//                var id = value.getUser().getId();
//                if (room.contain(id)) room.putUser(id, responseObserver);
//
//                var users = room.getEventObservers();
//                //responseObserver.onNext(value.getUser());
//                for (var user : users.entrySet()) {
//
//                    user.getValue().onNext(value.getUser());
//
//                }
//            }
//
//            @Override
//            public void onError(Throwable t) {
//            }
//
//            @Override
//            public void onCompleted() {
//            }
//        };
//    }
//
//
//    @Override
//    public StreamObserver<RoomRequest> leave(StreamObserver<User> responseObserver) {
//
//        return new StreamObserver<RoomRequest>() {
//            @Override
//            public void onNext(RoomRequest value) {
//                var id = value.getUser().getId();
//
//                RoomManager.Instance.leaveRoom(id);
//                var room = RoomManager.Instance.getRoom(value.getRoomName());
//
//                if (room.contain(id)) {
//                }
//
//
//                var users = room.getEventObservers();
//                for (var user : users.entrySet()) {
//                    //user.getValue().onNext(value.getUser());
//                }
//
//                var reply = User.newBuilder().setId(UUID.randomUUID().hashCode()).setName(value.getUser().getName()).build();
//
//                responseObserver.onNext(reply);
//                responseObserver.onNext(value.getUser());
////                int i = 0;
////                while (i == 2) {
////                    responseObserver.onNext(value.getUser());
////                    i++;
////                }
//            }
//
//            @Override
//            public void onError(Throwable t) {
//            }
//
//            @Override
//            public void onCompleted() {
//            }
//        };
//    }
}